## Stack name: prometheus-community/kube-prometheus-stack
## Ref: https://github.com/prometheus-community/helm-charts/tree/kube-prometheus-stack-35.5.1/charts/kube-prometheus-stack
##

## Manages Prometheus and Alertmanager components
##
prometheusOperator:
  enabled: true

## Deploy a Prometheus instance
##
prometheus:
  enabled: true
  ingress:
    enabled: true
    annotations:
      # kubernetes.io/ingress.allow-http: "true"
      kubernetes.io/ingress.class: nginx
    hosts:
      - "prometheus.${domain}"
    path: /
    pathType: Prefix
    service:
        port: 80
        targetPort: 9090

  ## Prometheus StorageSpec for persistent data
  ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/user-guides/storage.md
  ##
  prometheusSpec:
    storageSpec:
      emptyDir: {}
    retention: 90d
    replicas: 2

## Configuration for Grafana
## ref: https://grafana.com/
##
## Deploy a Grafana instance
##
grafana:
  enabled: true
  adminPassword: prom-operator # Please change the default password in production !!!
  ingress:
    ## If true, Grafana Ingress will be created
    ##
    enabled: true
    ## Annotations for Grafana Ingress
    ##
    annotations:
      kubernetes.io/ingress.allow-http: "true"
      kubernetes.io/ingress.class: nginx
    hosts:
      - "grafana.${domain}"
    path: /
    pathType: Prefix
  persistence:
    enabled: false

## Configuration for Alertmanager
## ref: https://prometheus.io/docs/alerting/alertmanager/
##
## Deploy an Alertmanager instance
##
alertmanager:
  enabled: true
  ingress:
    enabled: false

  # Configure email alerts
  config:
    global:
      resolve_timeout: 5m
    route:
      group_wait: 30s
      group_interval: 4m
      repeat_interval: 1h
      receiver: 'email'
      routes:
        - receiver: 'email'
          matchers:
          - severity="critical" 
    receivers:
    - name: 'email'
      email_configs:
      - to: '${email_to}'
        from: '${email_from}'
        smarthost: '${email_host}'
        auth_username: '${email_user}'
        auth_password: '${email_pass}'

additionalPrometheusRulesMap:
  - name: pod-cpu-utilization
    groups:
      - name: PodCPUUtilization
        rules:
          - alert: PodCPUUtilization
            expr: (sum(rate(container_cpu_usage_seconds_total{namespace!="", pod=~".*"}[5m]))) / count(count(node_cpu_seconds_total{mode="system"}) by (instance)) * 100 > 70
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "Pod CPU utilization is over 70%"
              description: "The CPU utilization of a pod is over 70%. Pod: {{ $labels.pod }}, Namespace: {{ $labels.namespace }}"
  - name: pod-crashloopbackoff
    groups:
      - name: PodCrashLoopBackOff
        rules:
          - alert: PodCrashLoopBackOff
            expr: kube_pod_container_status_restarts_total > 5
            for: 0m
            labels:
              severity: critical
            annotations: 
              description: "Pod {{ $labels.pod }} in {{ $labels.namespace }} is crash looping\n Value = {{ $value }}"
              summary: "Kubernetes pod crash looping"
  - name: pod-instance-down
    groups:
      - name: PodInstanceDown
        rules:
          - alert: PodInstanceDown
            expr: absent(up{job="kubelet"} == 1)
            for: 0s
            labels:
              severity: critical
            annotations:
              summary: "Pod instance is down"
              description: "The pod instance is down. Pod: {{ $labels.pod }}, Namespace: {{ $labels.namespace }}"
